<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="snack">

    <resultMap id="keywordMap" type="searchDTO" >
        <id column="snack_id" property="snack_id"/>
        <result column="snack_name" property="snack_name"/>
        <result column="company" property="company"/>
        <result column="snack_ingredients" property="snack_ingredients"/>
        <result column="allergy" property="allergy"/>
    </resultMap>

    <!-- 부분적 일치에 대한 전체 검색을 하기 위해 RESULT MAP 사용 / 칼럼 중 모든 문자열에 대한 검색 결과를 얻기 위한 쿼리 -->
    <select id="searchAll" resultType="searchDTO" resultMap="keywordMap">
        SELECT *
        FROM snack a
                 JOIN snack_nutritional b ON a.snack_id = b.snack_id
                 JOIN avg_score c ON a.snack_id = c.snack_id
        WHERE a.snack_name LIKE CONCAT('%', #{keyword}, '%')
           OR a.company LIKE CONCAT('%', #{keyword}, '%')
           OR a.snack_ingredients LIKE CONCAT('%', #{keyword}, '%')
           OR b.allergy LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <!-- 부분적 일치에 대한 이름에서만 검색을 하기 위해 RESULT MAP 사용 / 칼럼 중 모든 문자열에 대한 검색 결과를 얻기 위한 쿼리 -->
    <select id="searchName" resultType="searchDTO" resultMap="keywordMap">
        SELECT *
        FROM snack a
                 JOIN snack_nutritional b ON a.snack_id = b.snack_id
                 JOIN avg_score c ON a.snack_id = c.snack_id
        WHERE a.snack_name LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <!-- 부분적 일치에 대한 원재료에서만 검색을 하기 위해 RESULT MAP 사용 / 칼럼 중 모든 문자열에 대한 검색 결과를 얻기 위한 쿼리 -->
    <select id="searchIngredient" resultType="searchDTO" resultMap="keywordMap">
        SELECT *
        FROM snack a
                 JOIN snack_nutritional b ON a.snack_id = b.snack_id
                 JOIN avg_score c ON a.snack_id = c.snack_id
        WHERE a.snack_ingredients LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <!-- 쿠키위키의 검색 결과 중 항목을 선택했을 때 그 항목에 대한 데이터를 모조리 가져오기 위한 쿼리. -->
    <select id="snackInfo" resultType="searchDTO" resultMap="keywordMap">
        SELECT *
        FROM snack a
                 JOIN snack_nutritional b ON a.snack_id = b.snack_id
                 JOIN avg_score c ON a.snack_id = c.snack_id
        WHERE a.snack_id = #{snack_id}
    </select>

    <!-- 리뷰든 큐레이션이든 별점을 매기는 행위가 있을 때, 스낵에 그 점수를 반영하고 평점을 저장하는 쿼리 -->
    <update id="addSnackReviewScore" parameterType="reviewDTO">
        UPDATE avg_score
        SET total_score = total_score + #{review_score},
            review_count = review_count + 1,
            avg_score = total_score / review_count
        WHERE snack_id = #{snack_id}
    </update>

    <!-- 리뷰든 큐레이션이든 이미 별점을 매긴 게시물이나 결과를 지웠을 때 그 변화를 반영하는 쿼리. -->
    <update id="subtractSnackReviewScore" parameterType="int">
        UPDATE avg_score
        SET total_score = total_score - (SELECT review_score FROM review_bbs WHERE review_id = #{review_id}),
            review_count = review_count - 1,
            avg_score = IF(review_count > 0, (total_score / review_count), 0)
        WHERE snack_id = (SELECT snack_id FROM review_bbs WHERE review_id = #{review_id})
    </update>

    <!-- 리뷰든 큐레이션이든 이미 별점을 매긴 게시물이나 결과를 수정해서 별점을 바꾸었을 때 그 변화를 반영하는 쿼리 -->
    <update id="updateSnackReviewScore" parameterType="reviewDTO">
           <![CDATA[
        UPDATE avg_score AS a
            INNER JOIN review_bbs AS r ON a.snack_id = r.snack_id
            SET a.total_score = a.total_score - r.review_score + #{review_score},
                a.avg_score = a.total_score / a.review_count
        WHERE a.snack_id = #{snack_id}
        ]]>
</update>

    <insert id="saveKeyword" parameterType="String">
        INSERT INTO popular_keyword(searched_keyword, searched_count) VALUES(#{keyword}, 1)
    </insert>

    <select id="duplicateCheck" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM popular_keyword WHERE searched_keyword = #{keyword}
    </select>

    <update id="updateKeywordCount" parameterType="String">
        UPDATE popular_keyword SET searched_count = searched_count + 1 WHERE searched_keyword = #{keyword}
    </update>

    <select id="getPopularKeywords" resultType="string">
        SELECT searched_keyword
        FROM popular_keyword
        ORDER BY searched_count DESC
            LIMIT 5;
    </select>


</mapper>